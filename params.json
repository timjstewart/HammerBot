{"name":"Hammerbot","tagline":"A DSL for testing Web Services","body":"# HammerBot #\r\n\r\nAn HTTP/HTTPS service testing framework.\r\n\r\n*Hammer - verb. to work at constantly, to quesiton in a relentless\r\nmanner.*\r\n\r\n## Examples ##\r\n\r\n### Common Imports ####\r\n\r\n* This is all you need to define Suites and Tests:\r\n\r\n        import tjs.hammerbot._\r\n\r\n* To actually run any tests, you'll need:\r\n\r\n        import tjs.hammerbot.cli._\r\n\r\n### Tests ###\r\n\r\n* Make a GET request to a service.  The only reason this would fail is if\r\nthe service could not be contacted.\r\n\r\n        test(\"Call my service\",\r\n          get(\"http://myservice.mycompany.com\"))\r\n\r\n* Make a GET request to a service and ensure that the status code is\r\n  200:\r\n\r\n        test(\"Call my service\",\r\n          get(\"http://myservice.mycompany.com\")\r\n            .statusCodeEquals(200))\r\n\r\n* Make a GET request to a service and ensure that the status code is\r\n  between 400 and 403:\r\n\r\n        test(\"Call my service\",\r\n          get(\"http://myservice.mycompany.com\")\r\n            .statusCodeIsInRange(400, 403))\r\n\r\n* Make a GET request to a service and ensure that the content type is\r\n  exactly \"application/json\":\r\n\r\n        test(\"Call my service\",\r\n          get(\"http://myservice.mycompany.com\")\r\n            .contentTypeIs(\"application/json\"))\r\n\r\n* Make a GET request to a service and ensure that the content type\r\n  contains \"application/json\" (useful for services that contain the character\r\n  encoding too):\r\n\r\n        test(\"Call my service\",\r\n          get(\"http://myservice.mycompany.com\")\r\n            .contentTypeContains(\"application/json\"))\r\n\r\n\r\n* Make a GET request to a service and ensure that the response body\r\n  contains a JSON property with a specific value:\r\n\r\n        test(\"Call my service\",\r\n          get(\"http://myservice.mycompany.com\")\r\n            .jsonPropertyEquals(\"user/id\", 12345))\r\n\r\n* Make a GET request to a service and save a JSON property under a specific\r\n  key:\r\n\r\n        test(\"Call my service\",\r\n          get(\"http://myservice.mycompany.com\")\r\n            .saveJsonProperty(\"user/id\", \"user_id\"))\r\n\r\n* Make a GET request to a service using the value of a key.  If the key is not\r\n  found, the test will fail:\r\n\r\n        test(\"Call my service\", \r\n          get(\"http://myservice.mycompany.com/users/${user_id}\")\r\n\r\n### Test Suites ###\r\n\r\n* Create a Test Suite that contains a single test:\r\n\r\n        suite(\"My Test Suite\",\r\n          test(\"Test One\",\r\n            get(\"http://myservice.mycompany.com/users\")))\r\n\r\n\r\n* Create a Test Suite that contains two tests:\r\n\r\n        suite(\"My Test Suite\",\r\n\r\n          test(\"Test One\",\r\n            get(\"http://myservice.mycompany.com/users\")),\r\n\r\n          test(\"Test Two\",\r\n            get(\"http://myservice.mycompany.com/blogs\")))\r\n\r\n* Create a collection of Test Suites:\r\n\r\n        suites(\"My Test Suites\",\r\n\r\n          suite(\"My First Test Suite\",\r\n\r\n            test(\"Test One\",\r\n              get(\"http://myservice.mycompany.com/users\")),\r\n\r\n            test(\"Test Two\",\r\n              get(\"http://myservice.mycompany.com/blogs\")))\r\n\r\n\r\n          suite(\"My Second Suite\",\r\n\r\n            test(\"Test Three\",\r\n              get(\"http://myservice.mycompany.com/comments\")),\r\n\r\n            test(\"Test Four\",\r\n              get(\"http://myservice.mycompany.com/tags\"))))\r\n\r\n\r\n### Configuration ###\r\n\r\nConfiguration can be used to set more dynamic values in one place so that it\r\ncan be used by multiple suites:\r\n\r\n* Create a configuration object with two key/value pairs in it:\r\n\r\n        val conf = config(\r\n          \"secret\"     -> \"abcdcafe\",\r\n          \"usersHost\"  -> \"localhost:9000\")\r\n\r\n* Create a configuration that is only used by one Suite:\r\n\r\n        suite(\"My Test Suite\",\r\n\r\n          config(\r\n            \"secret\"     -> \"abcdcafe\",\r\n            \"usersHost\"  -> \"localhost:9000\"),\r\n\r\n          test(\"Test One\",\r\n            get(\"http://myservice.mycompany.com/users\")))\r\n\r\n* Configuration objects can be merged with the '+' operator;\r\n\r\n        val confA = config(\r\n          \"a\" -> \"100\",\r\n          \"b\" -> \"200\")\r\n               \r\n        val confB = config(\r\n          \"c\" -> \"300\",\r\n          \"d\" -> \"400\")\r\n\r\n        val allConf = confA + confB\r\n\r\n### Running Suites ###\r\n\r\n* Here is an example main method belonging to a Main object:\r\n\r\n        override def main(args: Array[String]): Unit = {\r\n\r\n          val socialSuite = suites( ... )\r\n\r\n          val hosts = config(\r\n            \"blogHost\" -> \"localhost:9000\",\r\n            \"tagsHost\" -> \"localhost:8000\"\r\n          )\r\n\r\n          CommandLineProcessor.run(args, socialSuite, hosts)\r\n        }\r\n\r\n* Running the sample driver from SBT:\r\n\r\n        sbt \"project driver\" \"run run\"\r\n\r\n* Running the sample driver from SBT in debug mode:\r\n\r\n        sbt \"project driver\" \"run run -d\"\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}